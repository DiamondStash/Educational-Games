<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Slithery Snake Showdown</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js"></script>
    <script src="https://unpkg.com/feather-icons"></script>
    <style>
        #gameCanvas {
            border: 2px solid #4a5568;
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .snake-cell {
            background-color: #48bb78;
            border: 1px solid #2f855a;
            border-radius: 2px;
        }
        .food-cell {
            background-color: #f56565;
            border-radius: 50%;
        }
    </style>
</head>
<body class="bg-gray-900 text-gray-100 min-h-screen flex flex-col items-center justify-center p-4">
    <div class="text-center mb-8">
        <h1 class="text-4xl font-bold mb-2 text-green-400">Slithery Snake Showdown üêç</h1>
        <p class="text-gray-400 mb-4">Use arrow keys or WASD to control the snake</p>
        <div class="flex justify-center gap-8 mb-4">
            <div class="bg-gray-800 p-3 rounded-lg">
                <span class="text-gray-400">Score:</span>
                <span id="score" class="text-2xl font-bold text-green-400 ml-2">0</span>
            </div>
            <div class="bg-gray-800 p-3 rounded-lg">
                <span class="text-gray-400">High Score:</span>
                <span id="highScore" class="text-2xl font-bold text-red-400 ml-2">0</span>
            </div>
        </div>
    </div>

    <div class="relative">
        <canvas id="gameCanvas" width="400" height="400" class="bg-gray-800"></canvas>
        <div id="gameOver" class="hidden absolute inset-0 bg-black bg-opacity-70 flex flex-col items-center justify-center rounded-lg">
            <h2 class="text-3xl font-bold text-red-500 mb-4">Game Over!</h2>
            <p class="text-xl text-gray-300 mb-6">Your score: <span id="finalScore" class="text-green-400">0</span></p>
            <button id="restartBtn" class="px-6 py-2 bg-green-600 hover:bg-green-700 text-white font-bold rounded-lg transition duration-200">
                Play Again
            </button>
        </div>
    </div>

    <div class="mt-8 flex gap-4">
        <button id="startBtn" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-lg transition duration-200">
            Start Game
        </button>
        <button id="pauseBtn" class="px-6 py-2 bg-yellow-600 hover:bg-yellow-700 text-white font-bold rounded-lg transition duration-200">
            Pause
        </button>
    </div>

    <div class="mt-8 bg-gray-800 p-4 rounded-lg max-w-md">
        <h3 class="text-xl font-bold text-green-400 mb-2">How to Play:</h3>
        <ul class="text-gray-300 space-y-2">
            <li class="flex items-center"><i data-feather="arrow-up" class="mr-2"></i> Move Up</li>
            <li class="flex items-center"><i data-feather="arrow-down" class="mr-2"></i> Move Down</li>
            <li class="flex items-center"><i data-feather="arrow-left" class="mr-2"></i> Move Left</li>
            <li class="flex items-center"><i data-feather="arrow-right" class="mr-2"></i> Move Right</li>
            <li class="flex items-center"><i data-feather="zap" class="mr-2"></i> Eat red food to grow</li>
            <li class="flex items-center"><i data-feather="alert-triangle" class="mr-2"></i> Don't hit walls or yourself!</li>
        </ul>
    </div>

    <script>
        feather.replace();

        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const highScoreElement = document.getElementById('highScore');
        const finalScoreElement = document.getElementById('finalScore');
        const gameOverElement = document.getElementById('gameOver');
        const startBtn = document.getElementById('startBtn');
        const pauseBtn = document.getElementById('pauseBtn');
        const restartBtn = document.getElementById('restartBtn');

        const gridSize = 20;
        const tileCount = canvas.width / gridSize;
        let speed = 7;

        let snake = [];
        let food = {};
        let direction = 'right';
        let nextDirection = 'right';
        let score = 0;
        let highScore = localStorage.getItem('snakeHighScore') || 0;
        let gameRunning = false;
        let gamePaused = false;
        let gameLoop;

        highScoreElement.textContent = highScore;

        function initGame() {
            snake = [
                {x: 5, y: 10},
                {x: 4, y: 10},
                {x: 3, y: 10}
            ];
            
            direction = 'right';
            nextDirection = 'right';
            score = 0;
            scoreElement.textContent = score;
            speed = 7;
            
            createFood();
            gameOverElement.classList.add('hidden');
        }

        function createFood() {
            food = {
                x: Math.floor(Math.random() * tileCount),
                y: Math.floor(Math.random() * tileCount)
            };
            
            // Make sure food doesn't appear on snake
            for (let i = 0; i < snake.length; i++) {
                if (food.x === snake[i].x && food.y === snake[i].y) {
                    return createFood();
                }
            }
        }

        function drawSnake() {
            for (let i = 0; i < snake.length; i++) {
                // Head is different color
                if (i === 0) {
                    ctx.fillStyle = '#38a169';
                } else {
                    ctx.fillStyle = '#48bb78';
                }
                
                ctx.fillRect(snake[i].x * gridSize, snake[i].y * gridSize, gridSize-1, gridSize-1);
                ctx.strokeStyle = '#2f855a';
                ctx.strokeRect(snake[i].x * gridSize, snake[i].y * gridSize, gridSize-1, gridSize-1);
            }
        }

        function drawFood() {
            ctx.fillStyle = '#f56565';
            ctx.beginPath();
            ctx.arc(
                food.x * gridSize + gridSize/2, 
                food.y * gridSize + gridSize/2, 
                gridSize/2 - 1, 
                0, 
                Math.PI * 2
            );
            ctx.fill();
        }

        function moveSnake() {
            if (gamePaused) return;
            
            const head = {x: snake[0].x, y: snake[0].y};
            
            // Change direction
            switch(nextDirection) {
                case 'up':
                    if (direction !== 'down') direction = nextDirection;
                    break;
                case 'down':
                    if (direction !== 'up') direction = nextDirection;
                    break;
                case 'left':
                    if (direction !== 'right') direction = nextDirection;
                    break;
                case 'right':
                    if (direction !== 'left') direction = nextDirection;
                    break;
            }
            
            // Move head
            switch(direction) {
                case 'up':
                    head.y--;
                    break;
                case 'down':
                    head.y++;
                    break;
                case 'left':
                    head.x--;
                    break;
                case 'right':
                    head.x++;
                    break;
            }
            
            // Check if snake hit the wall
            if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                gameOver();
                return;
            }
            
            // Check if snake hit itself
            for (let i = 0; i < snake.length; i++) {
                if (head.x === snake[i].x && head.y === snake[i].y) {
                    gameOver();
                    return;
                }
            }
            
            // Check if snake ate food
            if (head.x === food.x && head.y === food.y) {
                // Don't remove tail (snake grows)
                createFood();
                score++;
                scoreElement.textContent = score;
                
                // Increase speed slightly
                if (score % 5 === 0 && speed < 15) {
                    speed += 0.5;
                    clearInterval(gameLoop);
                    gameLoop = setInterval(gameStep, 1000 / speed);
                }
            } else {
                // Remove tail
                snake.pop();
            }
            
            // Add new head
            snake.unshift(head);
        }

        function gameStep() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            drawFood();
            moveSnake();
            drawSnake();
        }

        function gameOver() {
            clearInterval(gameLoop);
            gameRunning = false;
            
            finalScoreElement.textContent = score;
            
            if (score > highScore) {
                highScore = score;
                highScoreElement.textContent = highScore;
                localStorage.setItem('snakeHighScore', highScore);
            }
            
            gameOverElement.classList.remove('hidden');
        }

        function startGame() {
            if (gameRunning) return;
            
            initGame();
            gameRunning = true;
            gamePaused = false;
            gameLoop = setInterval(gameStep, 1000 / speed);
        }

        function togglePause() {
            if (!gameRunning) return;
            
            gamePaused = !gamePaused;
            pauseBtn.textContent = gamePaused ? 'Resume' : 'Pause';
        }

        // Event listeners
        document.addEventListener('keydown', function(e) {
            switch(e.key) {
                case 'ArrowUp':
                case 'w':
                case 'W':
                    nextDirection = 'up';
                    break;
                case 'ArrowDown':
                case 's':
                case 'S':
                    nextDirection = 'down';
                    break;
                case 'ArrowLeft':
                case 'a':
                case 'A':
                    nextDirection = 'left';
                    break;
                case 'ArrowRight':
                case 'd':
                case 'D':
                    nextDirection = 'right';
                    break;
                case ' ':
                    togglePause();
                    break;
            }
        });

        startBtn.addEventListener('click', startGame);
        pauseBtn.addEventListener('click', togglePause);
        restartBtn.addEventListener('click', startGame);

        // Initial draw
        ctx.fillStyle = '#2d3748';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
    </script>
</body>
</html>
