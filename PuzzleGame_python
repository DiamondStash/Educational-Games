import random

# Define the goal state of the puzzle
goal = [1, 2, 3, 4, 5, 6, 7, 8, 0]

# Generate a random initial state
def generate_state():
    state = goal.copy()
    random.shuffle(state)
    return state

# Check if a state is the goal state
def is_goal(state):
    return state == goal

# Display a state as a 3x3 grid
def display_state(state):
    print("+-+-+-+")
    for i in range(0, 9, 3):
        print("|{}|{}|{}|".format(*state[i:i+3]))
        print("+-+-+-+")

# Find the position of the empty tile (0) in a state
def find_empty(state):
    return state.index(0)

# Swap the empty tile with another tile in a state
def swap_tiles(state, i, j):
    state[i], state[j] = state[j], state[i]

# Move the empty tile up, down, left or right in a state
def move_up(state):
    i = find_empty(state)
    if i not in [0, 1, 2]:
        swap_tiles(state, i, i-3)

def move_down(state):
    i = find_empty(state)
    if i not in [6, 7, 8]:
        swap_tiles(state, i, i+3)

def move_left(state):
    i = find_empty(state)
    if i not in [0, 3, 6]:
        swap_tiles(state, i, i-1)

def move_right(state):
    i = find_empty(state)
    if i not in [2, 5, 8]:
        swap_tiles(state, i, i+1)

# Get a list of valid actions for a state
def get_actions(state):
    actions = []
    i = find_empty(state)
    if i not in [0, 1, 2]:
        actions.append("up")
    if i not in [6, 7, 8]:
        actions.append("down")
    if i not in [0, 3, 6]:
        actions.append("left")
    if i not in [2, 5, 8]:
        actions.append("right")
    return actions

# Apply an action to a state and return a new state
def apply_action(state, action):
    new_state = state.copy()
    if action == "up":
        move_up(new_state)
    elif action == "down":
        move_down(new_state)
    elif action == "left":
        move_left(new_state)
    elif action == "right":
        move_right(new_state)
    return new_state

# Generate a random solution path from the initial state to the goal state
def generate_solution():
    solution = []
    state = generate_state()
    while not is_goal(state):
        actions = get_actions(state)
        action = random.choice(actions)
        state = apply_action(state, action)
        solution.append(action)
    return solution

# Play the game interactively
def play_game():
    state = generate_state()
    display_state(state)
    while not is_goal(state):
        actions = get_actions(state)
        print("Valid actions: {}".format(", ".join(actions)))
        action = input("Enter your action: ")
        if action in actions:
            state = apply_action(state, action)
            display_state(state)
        else:
            print("Invalid action. Try again.")
    print("You win!")

# Uncomment the following line to play the game
# play_game()

tgdjrfjd